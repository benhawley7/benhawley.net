{"version":3,"sources":["service-worker.js"],"names":["currentCacheName","Me","split","ChewbaccaChatImage","TicTacToeImage","cacheItems","self","addEventListener","evt","console","log","waitUntil","caches","open","then","cache","addAll","keys","cacheNames","filter","cacheName","cachesToDelete","Promise","all","map","cacheToDelete","delete","clients","claim","respondWith","match","request","response","fetch"],"mappings":";;;;;;;AAmCA,aAlCA,IAAA,EAAA,EAAA,QAAA,+BACA,EAAA,EAAA,QAAA,gCACA,EAAA,EAAA,QAAA,6BAgCA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GA9BA,IAAMA,EAAmB,WAAaC,EAAGC,QAAAA,MAAM,KAAK,GAC9CC,EAAmBD,QAAAA,MAAM,KAAK,GAAKE,EAAeF,QAAAA,MAAM,KAAK,GAC7DG,EAAa,CACfJ,EADe,QAEfE,EAFe,QAGfC,EAHe,SAMnBE,KAAKC,iBAAiB,UAAW,SAAAC,GAC7BC,QAAQC,IAAI,eACZF,EAAIG,UACAC,OAAOC,KAAKb,GAAkBc,KAAK,SAAAC,GAC/BA,EAAMC,OAAOX,QAKzBC,KAAKC,iBAAiB,WAAY,SAAAC,GAC9BA,EAAIG,UACAC,OAAOK,OAAOH,KAAK,SAAAI,GACRA,OAAAA,EAAWC,OAAO,SAAAC,GAAaA,OAAAA,IAAcpB,MACrDc,KAAK,SAAAO,GACGC,OAAAA,QAAQC,IAAIF,EAAeG,IAAI,SAAAC,GAC3Bb,OAAAA,OAAOc,OAAOD,QAE1BX,KAAK,WAAMR,OAAAA,KAAKqB,QAAQC,aAKnCtB,KAAKC,iBAAiB,QAAS,SAAAC,GAC3BA,EAAIqB,YACAjB,OAAOC,KAAKb,GAAkBc,KAAK,SAAAC,GACxBA,OAAAA,EAAMe,MAAMtB,EAAIuB,SAASjB,KAAK,SAAAkB,GAI1BA,OAHHA,GACAvB,QAAQC,IAAI,sBAETsB,GAAYC,MAAMzB,EAAIuB,SAASjB,KAAK,SAAAkB,GAGhCA,OAAAA","file":"service-worker.map","sourceRoot":"../src","sourcesContent":["\nimport Me from \"./assets/me-compressed.jpg\";\nimport ChewbaccaChatImage from \"./assets/chewbacca-chat.png\";\nimport TicTacToeImage from \"./assets/tic-tac-toe.jpg\";\n\nconst currentCacheName = \"BHCache-\" + Me.split(\".\")[1]\n    + ChewbaccaChatImage.split(\".\")[1] + TicTacToeImage.split(\".\")[1];\nconst cacheItems = [\n    Me,\n    ChewbaccaChatImage,\n    TicTacToeImage\n];\n\nself.addEventListener(\"install\", evt => {\n    console.log(\"Installing.\");\n    evt.waitUntil(\n        caches.open(currentCacheName).then(cache => {\n            cache.addAll(cacheItems);\n        })\n    );\n});\n\nself.addEventListener(\"activate\", evt => {\n    evt.waitUntil(\n        caches.keys().then(cacheNames => {\n            return cacheNames.filter(cacheName => cacheName !== currentCacheName);\n        }).then(cachesToDelete => {\n            return Promise.all(cachesToDelete.map(cacheToDelete => {\n                return caches.delete(cacheToDelete);\n            }));\n        }).then(() => self.clients.claim())\n    );\n});\n\n\nself.addEventListener(\"fetch\", evt => {\n    evt.respondWith(\n        caches.open(currentCacheName).then(cache => {\n            return cache.match(evt.request).then(response => {\n                if (response) {\n                    console.log(\"Getting from cache\");\n                }\n                return response || fetch(evt.request).then(response => {\n                    // console.log(\"Adding to cache\");\n                    // cache.put(evt.request, response.clone());\n                    return response;\n                });\n            });\n        })\n    );\n});"]}